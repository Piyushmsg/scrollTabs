[{"C:\\series\\web-app\\scrolltab\\src\\index.js":"1","C:\\series\\web-app\\scrolltab\\src\\components\\confirmDialogBox\\ConfirmDialogBox.js":"2","C:\\series\\web-app\\scrolltab\\src\\components\\tabs\\TabsContainer.js":"3","C:\\series\\web-app\\scrolltab\\src\\components\\tabs\\Tabs.js":"4"},{"size":221,"mtime":1607778797662,"results":"5","hashOfConfig":"6"},{"size":1019,"mtime":1607709385809,"results":"7","hashOfConfig":"6"},{"size":330,"mtime":1607755528728,"results":"8","hashOfConfig":"6"},{"size":5921,"mtime":1607779683085,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6b91ku",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"C:\\series\\web-app\\scrolltab\\src\\index.js",[],"C:\\series\\web-app\\scrolltab\\src\\components\\confirmDialogBox\\ConfirmDialogBox.js",["19"],"C:\\series\\web-app\\scrolltab\\src\\components\\tabs\\TabsContainer.js",[],"C:\\series\\web-app\\scrolltab\\src\\components\\tabs\\Tabs.js",["20"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport ScrollContainer from 'react-indiana-drag-scroll'\r\nimport ConfirmDialogBox from '../confirmDialogBox/ConfirmDialogBox';\r\n\r\nconst initialTabs = [\r\n    {label: \"Tab1\", body: \"Tab 1 detail\"},\r\n    {label: \"Tab2\", body: \"Tab 2 detail\"},\r\n    {label: \"Tab3\", body: \"Tab 3 detail\"}\r\n]\r\n\r\nconst TAB_LIMIT = 10;\r\n\r\nconst Tabs = (props) => {\r\n    const [tabs, setTabs] = useState(initialTabs);\r\n    const [currentTab, setCurrentTab] = useState(0);\r\n    const [isSliderEnable, setIsSliderEnable ] = useState(false)\r\n    const [isLeftButtonEnable, setIsLeftButtonEnable] = useState(false)\r\n    const [isRightButtonEnable, setIsRightButtonEnable] = useState(false)\r\n    const [deleteIndex, setDeleteIndex] = useState()\r\n    const tabListRef = useRef(null);\r\n\r\n    useEffect(()=>{\r\n        if (tabListRef.current) {\r\n            let visibleTab = tabListRef.current.scrollWidth > tabListRef.current.clientWidth;\r\n      \r\n            if (visibleTab !== isSliderEnable) {\r\n              setIsSliderEnable(visibleTab)\r\n            }\r\n          }\r\n    })\r\n\r\n    const addTab = () => {\r\n        if (tabs.length < TAB_LIMIT) {\r\n          let modifyTabs = tabs;\r\n          modifyTabs.push({\r\n            label: `Tab${modifyTabs.length + 1}`,\r\n            body: `Tab ${modifyTabs.length + 1} detail`,\r\n          });\r\n          updateTabs(modifyTabs, true);\r\n        }\r\n    }\r\n\r\n    const switchTabs = (currentTab) => {\r\n       setCurrentTab(currentTab);\r\n      };\r\n\r\n     const handleListItemClick = (index, e) => {\r\n        e.stopPropagation();\r\n        if (index !== currentTab) {\r\n          switchTabs(index, e);\r\n        }\r\n      };\r\n\r\n    const updateTabs = (modifyTabs, switchTab) => {\r\n\r\n        setTabs([...modifyTabs])\r\n     \r\n        if (switchTab) {\r\n            setCurrentTab(modifyTabs.length - 1)\r\n            moveLeft();\r\n        }\r\n      };\r\n\r\n    const handleTabDelete = (event, index) => {\r\n   \r\n       setDeleteIndex(index)\r\n   \r\n    }\r\n\r\n    const confirmCallback = (value) => {\r\n        if(value){\r\n            let modifyTabs = tabs\r\n            modifyTabs.splice(deleteIndex, 1);\r\n            updateTabs(modifyTabs);\r\n            deleteIndex === 0 ? switchTabs(deleteIndex) : switchTabs(deleteIndex - 1);\r\n            setDeleteIndex()\r\n        }\r\n        else{\r\n            setDeleteIndex()\r\n        }\r\n    }\r\n\r\n    const moveLeft = () => {\r\n        tabListRef.current.className = 'smoothScroll'\r\n        tabListRef.current.scrollLeft += 400;\r\n    }\r\n\r\n    const moveRight = () => {\r\n        tabListRef.current.className = 'smoothScroll'\r\n        tabListRef.current.scrollLeft -= 400;\r\n    }\r\n\r\n    const sliderVisible = () => {\r\n        if (tabListRef) {\r\n          let isSliderBoxShadowVisible = tabListRef.current.scrollLeft + tabListRef.current.clientWidth < tabListRef.current.scrollWidth;\r\n          if (isSliderBoxShadowVisible !== isRightButtonEnable) {\r\n            setIsRightButtonEnable(isSliderBoxShadowVisible)\r\n          }\r\n        }\r\n      };\r\n\r\n    const sliderLeftButtonEnable = () => {\r\n        if (tabListRef) {\r\n          let isAddTabBoxShadowVisible = tabListRef.current.scrollLeft !== 0;\r\n          if (isAddTabBoxShadowVisible !== isLeftButtonEnable) {\r\n              setIsLeftButtonEnable(isAddTabBoxShadowVisible)\r\n          }\r\n        }\r\n      };\r\n\r\n    const handleTabListScroll = () => {\r\n        sliderVisible();\r\n        sliderLeftButtonEnable();\r\n    }\r\n\r\n    return (\r\n        <div className=\"tabSection\">\r\n            <div className=\"tabNav\">\r\n                <div className=\"tabSlider\" style={{visibility: isSliderEnable ? 'visible' : 'hidden'}}> \r\n                    <div className={`chevronWrapper ${!isLeftButtonEnable &&'notAllowed'}`} onClick={moveRight} >\r\n                    <span className=\"chevron left\" />\r\n                    </div>\r\n                </div>  \r\n                <ScrollContainer  innerRef={tabListRef} getElement={(v)=>console.log(v)} className=\"tabList\" onScroll={handleTabListScroll} >\r\n                    {tabs.map((item, i)=>{\r\n                        return (\r\n                            <div key={i}  className=\"tabListContainer\">\r\n                                <div  className=\"tabListItemWrapper\">\r\n                                    <div className={`tabListItem ${i === currentTab ? 'activeTab' : 'inActiveTab'}`} onClick={(e)=>handleListItemClick(i, e)} >\r\n                                        <div className=\"tabListText\"> \r\n                                        {item.label}\r\n                                        </div>\r\n                                    </div>\r\n                                </div> \r\n                                {tabs.length>1&&<div className=\"tabDeleteButton\" onClick={(e) => handleTabDelete(e, i)}>\r\n                                    {' '}\r\n                                    X{' '}\r\n                                </div>}\r\n                            </div> \r\n                        )\r\n                    })}\r\n                </ScrollContainer> \r\n                <div className=\"tabSlider\" style={{visibility: isSliderEnable ? 'visible' : 'hidden'}}>\r\n                    <div onClick={moveLeft} className={`chevronWrapper ${!isRightButtonEnable &&'notAllowed'}`}> \r\n                        <span className=\"chevron right\" />\r\n                    </div>\r\n                </div>\r\n                <div className={`tabAddButtonWrapper ${tabs.length === TAB_LIMIT &&'notAllowed'}`} onClick={addTab}>\r\n                    <div className=\"tabAddButton\">\r\n                        <span className=\"plus\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"contentBody\">\r\n                {tabs[currentTab].body}\r\n            </div>\r\n            {deleteIndex&&<ConfirmDialogBox tabToBeDelete={tabs[deleteIndex]} confirm={confirmCallback} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tabs;",{"ruleId":"21","severity":1,"message":"22","line":7,"column":23,"nodeType":"23","messageId":"24","endLine":7,"endColumn":35},{"ruleId":"25","severity":1,"message":"26","line":22,"column":5,"nodeType":"23","endLine":22,"endColumn":14,"suggestions":"27"},"no-unused-vars","'setIsVisible' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setIsSliderEnable'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [isSliderEnable] as a second argument to the useEffect Hook.",["28"],{"desc":"29","fix":"30"},"Add dependencies array: [isSliderEnable]",{"range":"31","text":"32"},[1102,1102],", [isSliderEnable]"]